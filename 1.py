from statsmodels.tsa.arima.model import ARIMA
import pmdarima as pm

from services.fetch_data import fetch_ohlcv
from utils.metrics import rmse
from utils.sharpe import sharpe_ratio
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_absolute_error

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

PAIRS = ['BTC/USDT']
results = {}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs('plots', exist_ok=True)

for pair in PAIRS:
    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—ã: {pair}")
    series = fetch_ohlcv(pair)
    series.index = pd.to_datetime(series.index)
    series = series.asfreq('D')

plt.plot(series)
plt.title("–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
plt.show()

result = adfuller(series)
print(series)
print(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞: {result[0]}')
print(f'p-–∑–Ω–∞—á–µ–Ω–∏–µ: {result[1]}')

model = ARIMA(series, order=(1,1,1))
model_fit = model.fit()
print(model_fit.summary)

ar_forecast = model_fit.forecast(steps=88)
print(f'–ü—Ä–æ–≥–Ω–æ–∑: {ar_forecast}')

data = series[-88:]
print(data)

y_true = data  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä)
y_pred = ar_forecast  # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ

mae = mean_absolute_error(y_true, y_pred)
print(f'MAE: {mae}')

plt.plot(series, label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')
plt.plot(ar_forecast, label='–ü—Ä–æ–≥–Ω–æ–∑', color='red')
plt.legend()
plt.show()