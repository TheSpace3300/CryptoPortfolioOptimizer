import numpy as np
import pandas as pd
from scipy.optimize import minimize
from services.fetch_data import fetch_ohlcv
from models.LSTM import train_lstm

def load_crypto_data(pairs):
    df_dict = {}
    for pair in pairs:
        df = fetch_ohlcv(pair)
        df_dict[pair] = df
    return pd.DataFrame(df_dict)

# –®–∞–≥ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
def optimize_portfolio(forecasts, total_investment):
    tickers = list(forecasts.keys())
    prices = np.array(list(forecasts.values()))

    # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    def objective(weights):
        portfolio_value = np.dot(weights, prices)
        return np.sum((weights * portfolio_value - total_investment / len(tickers))**2)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: —Å—É–º–º–∞ –≤–µ—Å–æ–≤ = 1, –≤–µ—Å–∞ >= 0
    constraints = ({'type': 'eq', 'fun': lambda weights: np.sum(weights) - 1})
    bounds = [(0, 1) for _ in tickers]

    # –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    initial_weights = np.ones(len(tickers)) / len(tickers)

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    result = minimize(objective, initial_weights, method='SLSQP', bounds=bounds, constraints=constraints)
    optimized_weights = result.x

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
    shares = (optimized_weights * total_investment) / prices
    return dict(zip(tickers, shares.astype(int))), dict(zip(tickers, optimized_weights))

# –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
def create_portfolio(pairs, total_investment, forecast_horizon):
    data = load_crypto_data(pairs)

    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    forecasts = train_lstm(data, forecast_horizon)

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
    shares, weights = optimize_portfolio(forecasts, total_investment)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    return shares, weights

def make_portfolio_minvol(portfolio):
    ans = ['üìä –¢–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å:']
    for symbol in portfolio.keys():
        ans.append(f"{symbol} ‚Äî {portfolio[symbol]} –µ–¥–∏–Ω–∏—Ü")
    return '\n'.join(ans)