def start_command():
    return '–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?'


def start_make_portfolio():
    return '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞ "BTC/USDT", –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–≤–µ–¥—ë—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –Ω–∞–∂–º–∏—Ç–µ "–°—Ç–æ–ø".\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞–∂–º–∏—Ç–µ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".'

def start_make_predict():
    return '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞ "BTC/USDT", –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–≤–µ–¥—ë—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –Ω–∞–∂–º–∏—Ç–µ "–°—Ç–æ–ø".\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞–∂–º–∏—Ç–µ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".'


def request_money():
    return '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Ä—Ç—Ñ–µ–ª—å.\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ 1000 USD –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –º–ª–Ω USD.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞".'


def return_main():
    return '–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.'


def request_stock_name():
    return '–í–≤–µ–¥–∏—Ç–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ü–∏–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'


def low_money():
    return '–í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —É–∫–∞–∑–∞–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã'


def is_not_digit():
    return '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'


def make_portfolio(portfolio):
    ans = ['–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:']
    for pair, info in portfolio.items():
        if info['weight']*100 > 0.1:
            ans.append(f"{pair.split('.')[0]}: {info['allocation']:.2f} $ ({info['weight']:.2%})")
    return '\n'.join(ans)

def make_predict(results):
    ans = []
    for pair, info in results.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π –∏ –ø–∞—Ä–æ–π
        ans.append(f"\nüìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {info['forecast_horizon']} –¥–Ω–µ–π –¥–ª—è {pair}:")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        if hasattr(info['forecast'], 'tolist'):
            forecast = '\n'.join(f"{x:.3f}" for x in info['forecast'].tolist())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        else:
            forecast = f"{info['forecast']:.3f}"  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∫ —Å–ø–∏—Å–∫—É –æ—Ç–≤–µ—Ç–æ–≤
        ans.append(forecast)

    return '\n'.join(ans)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
